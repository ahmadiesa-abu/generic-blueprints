tosca_definitions_version: cloudify_dsl_1_4

description: >
  Creates a new VM.

imports:
  - https://cloudify.co/spec/cloudify/6.4.2/types.yaml
  - plugin:cloudify-vsphere-plugin
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-fabric-plugin

inputs:

  cpus:
    type: string
    default: 6
    description: Number of virtual CPUs allocated to the VM
    display_label: CPUs

  memory:
    type: string
    default: 8192
    description: Number of RAM MB allocated to the VM
    display_label: Memory

  resource_pool_name:
    type: string
    display_label: Resource Pool Name
    description: resource pool inside vsphere where the VM would be created
    default: Resources

  vm_name:
    type: string
    display_label: VM Name
    description: VM name inside vsphere

  disk_size:
    type: integer
    display_label: VM disk size
    description: VM OS disk size
    default: 100

  iso_location_target:
    type: string
    display_label: The path where iso will be uploaded (vsphere)
    default: "test_images_upload"
    hidden: true

  manifest_source:
    type: string
    display_label: 'Manifest Source'
    description: The name of source
    default: 'rel/magicp1-2.0.0'

  software_version:
    type: string
    display_label: 'Software Version'
    description: SW Version. If empty download latest version.
    default: ''

  production_version:
    description: Use production version
    type: boolean
    display_label: 'Production Use'
    default: false

  datastore_name:
    type: string
    display_label: Datastore Name
    description: Name of the Datastore to use with the VM
    default: "VxRail-Virtual-SAN-Datastore-f96d4e19-aa8e-488e-a3c2-c57bf1775851"

  esxi_hostname:
    type: string
    default: "node--01.app1325.local"
    description: The name of ESXi hostname
    display_label: ESXi hostname

  vm_location:
    type: string
    default: "ece_blueprint"
    description: The name of folder where vm should be located
    display_label: vSphere VM Location

  vsphere_network_name:
    type: string
    display_label: Name of vsphere network name
    default: "vlan-1710"

  EO_IP:
    type: string
    default: "172.20.3.8"
    description: The ip of Edge Orchestrator
    display_label: EO IP

dsl_definitions:

  connection_config: &connection_config
    username: { get_secret: [vsphere, username] }
    password: { get_secret: [vsphere, password] }
    host: { get_secret: [vsphere, host] }
    port: { get_secret: [vsphere, port] }
    datacenter_name: { get_secret: [vsphere, datacenter_name] }
    resource_pool_name: {get_input: resource_pool_name}
    auto_placement: { get_secret: [vsphere, auto_placement] }
    allow_insecure: true

  artifactory_config: &artifactory_config
    artifactory_url: { get_secret: [artifactory, url ] }
    artifactory_user: { get_secret: [artifactory, username ] }
    artifactory_password: { get_secret: [artifactory, password ] }
    artifactory_verify_ssl: { get_secret: [artifactory, verify_ssl ] }
    manifest_source: { get_input: manifest_source }
    software_version: { get_input: software_version }

node_templates:

  datastore:
    type: cloudify.nodes.vsphere.Datastore
    properties:
      use_external_resource: true
      name: { get_input: datastore_name }
      connection_config: *connection_config

  manufacturing_iso:
    type: cloudify.nodes.vsphere.ISO
    properties:
      connection_config: *connection_config
      iso_file_path: ''
      datacenter_name: { get_secret: [vsphere, datacenter_name] }
      volume_prefix: {get_input: iso_location_target}
      allowed_datastore_ids:
        - { get_attribute: [ datastore, vsphere_datastore_id ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        precreate:
          implementation: scripts/download_iso.py
          executor: central_deployment_agent
          inputs:
            artifactory_config: *artifactory_config
            production_version: { get_input: production_version }
        create:
          inputs:
            iso_file_path: { get_attribute: [SELF, iso_path] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: datastore

  ansible_binary:
    type: cloudify.nodes.ansible.Ansible
    properties:
      installation_source: 'ansible==8.5.0'
      extra_packages:
        - pyvmomi
        - requests
        - paramiko
      galaxy_collections:
        - community.general
        - community.vmware

  vm_prep:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/prepare_vm.sh
          executor: central_deployment_agent

  vm:
    type: cloudify.nodes.ansible.Executor
    properties:
      ansible_external_venv: { get_attribute: [ansible_binary, playbook_venv ] }
      save_playbook: true
      sensitive_keys:
        - ansible_password
        - ansible_user
        - ansible_ssh_private_key_file
      sources: ansible/inventory.yaml
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          max_retries: 5
          retry_interval: 15
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            <<: &ansible_common_inputs
              save_playbook: { get_property: [ SELF, save_playbook ] }
              sources: { get_property: [ SELF, sources ] }
              sensitive_keys: { get_property: [ SELF, sensitive_keys ] }
              log_stdout: false
              store_facts: false
              debug_level: 0
            playbook_path: ansible/playbooks/create-vm-iso.yaml
            run_data:
              disk_size: { get_input: disk_size }
              cpus: { get_input: cpus }
              memory: { get_input: memory }
              vcenter:
                hostname: { get_secret: [vsphere, host] }
                username: { get_secret: [vsphere, username] }
                password: { get_secret: [vsphere, password] }
                folder: { get_input: vm_location }
                datacenter: { get_secret: [vsphere, datacenter_name] }
                vmname: { get_input: vm_name }
                esxihostname: { get_input: esxi_hostname }
                datastore: { get_input: datastore_name }
                filename: { get_attribute: [manufacturing_iso, iso_filename ] }
                remotefilepath: { get_attribute: [manufacturing_iso, datastore_file_name ] }
                macaddress: { get_attribute: [vm_prep, mac_address] }
                vmnetwork: { get_input: vsphere_network_name }
              TEMP_FILE_PATH: { get_attribute: [vm_prep, TEMP_FILE_PATH] }
        stop:
          max_retries: 5
          retry_interval: 15
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            <<: *ansible_common_inputs
            playbook_path: ansible/playbooks/delete-vm.yaml
            run_data:
              vcenter:
                hostname: { get_secret: [ vsphere, host ] }
                username: { get_secret: [ vsphere, username ] }
                password: { get_secret: [ vsphere, password ] }
                folder: { get_input: vm_location }
                datacenter: { get_secret: [ vsphere, datacenter_name ] }
                datastore: { get_input: datastore_name }
                vmname: { get_input: vm_name }
    relationships:
      - target: ansible_binary
        type: cloudify.relationships.depends_on
      - target: manufacturing_iso
        type: cloudify.relationships.depends_on
      - target: vm_prep
        type: cloudify.relationships.depends_on

  day0:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/wait_for_vm.sh
          executor: central_deployment_agent
          inputs:
            process:
              env:
                MAC_ADDR: { get_attribute: [ vm_prep, mac_address ] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/vm_handling.py
            task_name: run_day0
            fabric_env:
              host_string: { get_attribute: [SELF, vm_ip] }
              user: root
              password: root
            eo_ip: { get_input: EO_IP }
            dev_ser_num:
              concat:
                - { get_input: vm_name }
                - { get_attribute: [vm_prep, mac_address] }
    relationships:
      - target: vm_prep
        type: cloudify.relationships.depends_on
      - target: vm
        type: cloudify.relationships.depends_on

  restart_vm:
    type: cloudify.nodes.ansible.Executor
    properties:
      ansible_external_venv: { get_attribute: [ansible_binary, playbook_venv ] }
      save_playbook: true
      sensitive_keys:
        - ansible_password
        - ansible_user
        - ansible_ssh_private_key_file
      sources: ansible/inventory.yaml
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            <<: *ansible_common_inputs
            playbook_path: ansible/playbooks/restart-vm.yaml
            run_data:
              vcenter:
                hostname: { get_secret: [ vsphere, host ] }
                username: { get_secret: [ vsphere, username ] }
                password: { get_secret: [ vsphere, password ] }
                folder: { get_input: vm_location }
                datacenter: { get_secret: [ vsphere, datacenter_name ] }
                vmname: { get_input: vm_name }
    relationships:
      - target: vm_prep
        type: cloudify.relationships.depends_on
      - target: day0
        type: cloudify.relationships.depends_on

  day1:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/wait_for_vm.sh
          executor: central_deployment_agent
          inputs:
            process:
              env:
                MAC_ADDR: { get_attribute: [ vm_prep, mac_address ] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/vm_handling.py
            task_name: run_day1
            fabric_env:
              host_string: { get_attribute: [SELF, vm_ip] }
              user: root
              key: { get_secret: ece_private_key }
            process:
              base_dir: /usr/local/hzp
            eo_ip: { get_input: EO_IP }
    relationships:
      - target: vm_prep
        type: cloudify.relationships.depends_on
      - target: restart_vm
        type: cloudify.relationships.depends_on

  ece_vm:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/wait_for_vm.sh
          executor: central_deployment_agent
          inputs:
            process:
              env:
                MAC_ADDR: { get_attribute: [ vm_prep, mac_address ] }
    relationships:
      - target: vm_prep
        type: cloudify.relationships.depends_on
      - target: day1
        type: cloudify.relationships.depends_on

capabilities:

  mac_address:
    description: 'ECE VM mac-address'
    value: { get_attribute: [vm_prep, mac_address] }

  vm_ip:
    description: 'ECE VM ip-address'
    value: { get_attribute: [ece_vm, vm_ip] }